server:
  port : 9204
  tomcat:
    max-http-header-size: 8192  
  
spring:
  application:
    name: salesrecord-service
  cloud:
    consul:
      host: 127.0.0.1
      port: 8500
      discovery:
        healthCheckInterval: 15s
        instanceId: ${spring.application.name}:${spring.cloud.client.ip-address}:${server.port}
        preferIpAddress: true
        ipAddress: ${spring.cloud.client.ip-address}
        port: ${server.port}
    loadbalancer:
      retry:
        enabled: true  #重试机制开关,默认false
    stream:
      rabbit: # 进行rabbit的相关绑定配置
        bindings:
          my_input:
            consumer: # 进行消费端配置
              bindingRoutingKey: my-key # 设置一个RoutingKey信息
 #         my_output:
 #           producer: # 进行消费端配置
 #             routing-key-expression: '''my-key''' #定义 RoutingKey 的表达式配置    
      binders: # 在此处配置要绑定的rabbitmq的服务信息；
        defaultRabbit: # 表示定义的名称，用于于binding整合
          type: rabbit # 消息组件类型
          environment: # 设置rabbitmq的相关的环境配置
            spring:
              rabbitmq:
                addresses: amqp://127.0.0.1:5672
                username: oldxu
                password: 123456
                virtual-host: /
      bindings: # 服务的整合处理
        my_input: # 这个名字是一个通道的名称，在分析具体源代码的时候会进行说明
          destination: MyExchange # 表示要使用的Exchange名称定义
          content-type: application/json # 设置消息类型，本次为对象json，如果是文本则设置“text/plain”
          binder: defaultRabbit # 设置要绑定的消息服务的具体设置
          group: my-group # 进行操作的分组，实际上就表示持久化
#        my_output: # 这个名字是一个通道的名称，在分析具体源代码的时候会进行说明
#          destination: MyExchange # 表示要使用的Exchange名称定义
#          content-type: application/json # 设置消息类型，本次为对象json，如果是文本则设置“text/plain”
#          binder: defaultRabbit # 设置要绑定的消息服务的具体设置
  zipkin:
    enable: true
    baseUrl: http://127.0.0.1:9001
  sleuth:
    sampler:
      percentage: 0.1
  datasource:
    name: kph
    url: jdbc:mysql://127.0.0.1:3306/salesrecord?characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull&transformedBitIsBoolean=true&useUnicode=true
    username: root
    password: 
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.jdbc.Driver
    filters: stat
    maxActive: 50
    initialSize: 10
    maxWait: 60000
    minIdle: 10
    timeBetweenEvictionRunsMillis: 60000
    minEvictableIdleTimeMillis: 300000
    validationQuery: select 'x'
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    poolPreparedStatements: true
    maxOpenPreparedStatements: 20
#  redis:  #redis 配置
#    database: 0    # Redis数据库索引（默认为0）
#    host-name: 127.0.0.1
#    host: ${spring.redis.host-name}  # Redis服务器地址
#    port: 6379  # Redis服务器连接端口
#    password:   # Redis服务器连接密码（默认为空）
#    pool:
#      max-total: 10
#      max-active: ${spring.redis.pool.max-total}  # 连接池最大连接数（使用负值表示没有限制）
#      max-wait-millis: 3000
#      max-wait:  ${spring.redis.pool.max-wait-millis} # 连接池最大阻塞等待时间（使用负值表示没有限制）
#      max-idle: 10  # 连接池中的最大空闲连接
#      min-idle: 1 # 连接池中的最小空闲连接
#    timeout: 3000     # 连接超时时间（毫秒）

#redisson
redisson:
  address: redis://120.77.73.224:6379
  password: leyou

#hystrix
feign:
  hystrix:
    enabled: true   #默认为false，如果想用断路由，要打开这个设置
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 16000 #断路器线程池超时时间,这个值一定要比ribbon超时时间长，毫秒       

#ribbon 配置
ribbon:
  ConnectTimeout: 5000  #http建立socket超时时间,毫秒
  ReadTimeout: 5000   #http读取响应socket超时时间
  MaxAutoRetries: 0  #同一台实例最大重试次数,不包括首次调用
  MaxAutoRetriesNextServer: 2 #重试负载均衡其他的实例最大重试次数,不包括首次server
  OkToRetryOnAllOperations: false  #是否所有操作都重试，POST请求注意多次提交错误。默认true，设定为false的话，只有get请求会重试
    
#actuator
management:
  endpoint:
    web:
      exposure:
        include: '*'
    health:
      show-details: always
  security:
    enabled: false

#mybatis
mybatis:
  typeAliasesPackage: com.ly.service.entity
  mapperLocations: classpath:mapper/*.xml     