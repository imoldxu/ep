<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ly.service.mapper.StoreMapper" >
		
	<resultMap id="Store" type="com.ly.service.entity.Store" >
	    <id column="id" property="id" jdbcType="INTEGER" />
	    <result column="name" property="name" jdbcType="VARCHAR" />
	    <result column="address" property="address" jdbcType="VARCHAR" />
	    <result column="distance" property="distance" jdbcType="INTEGER" />
	    <result column="longitude" property="longitude" jdbcType="DOUBLE" />
	    <result column="latitude" property="latitude" jdbcType="DOUBLE" />
  	</resultMap>

	<select id="getStoreByDrug" resultMap="Store">
		SELECT t_store.id, t_store.name, t_store.address, t_store.longitude, t_store.latitude, ROUND(
	        6378.138 * 2 * ASIN(
	            SQRT(
	                POW(
	                    SIN(
	                    	(
	                          #{lat,jdbcType=DOUBLE} * PI() / 180 - t_store.latitude * PI() / 180
	                        ) / 2
	                    ),
	                    2
	                ) + COS( #{lat,jdbcType=DOUBLE} * PI() / 180) * COS( t_store.latitude * PI() / 180) * POW(
	                    SIN(
	                        (
	                            #{lon,jdbcType=DOUBLE} * PI() / 180 - t_store.longitude * PI() / 180
	                        ) / 2
	                    ),
	                    2
	                )
	            )
	        ) * 1000
	    ) AS distance FROM t_store LEFT JOIN t_store_drug ON t_store.id = t_store_drug.storeid WHERE t_store_drug.drugid = #{drugid,jdbcType=INTEGER} AND t_store.latitude BETWEEN #{lat,jdbcType=DOUBLE}-0.1 AND #{lat,jdbcType=DOUBLE}+0.1 AND t_store.longitude BETWEEN #{lon,jdbcType=DOUBLE}-0.1 AND #{lon,jdbcType=DOUBLE}+0.1 ORDER BY distance ASC
	</select>
	
	<select id="getStoreByGPS" resultMap="Store">
		SELECT t_store.id, t_store.name, t_store.address, t_store.longitude, t_store.latitude, ROUND(
	        6378.138 * 2 * ASIN(
	            SQRT(
	                POW(
	                    SIN(
	                    	(
	                          #{lat,jdbcType=DOUBLE} * PI() / 180 - t_store.latitude * PI() / 180
	                        ) / 2
	                    ),
	                    2
	                ) + COS( #{lat,jdbcType=DOUBLE} * PI() / 180) * COS( t_store.latitude * PI() / 180) * POW(
	                    SIN(
	                        (
	                            #{lon,jdbcType=DOUBLE} * PI() / 180 - t_store.longitude * PI() / 180
	                        ) / 2
	                    ),
	                    2
	                )
	            )
	        ) * 1000
	    ) AS distance FROM t_store WHERE t_store.latitude BETWEEN #{lat,jdbcType=DOUBLE}-0.1 AND #{lat,jdbcType=DOUBLE}+0.1 AND t_store.longitude BETWEEN #{lon,jdbcType=DOUBLE}-0.1 AND #{lon,jdbcType=DOUBLE}+0.1 ORDER BY distance ASC LIMIT #{size,jdbcType=INTEGER}
	</select>
	
</mapper>